You are given a sequence A1,A2,…,AN. You may perform the following operation any number of times: select any two adjacent elements Ai and Ai+1 and replace one of them with Ai+Ai+12 (a real number, i.e. without rounding). You may also select each pair of adjacent elements and each element to replace in multiple operations, i.e. any number of times.

Is it possible to make the sequence strictly increasing in a finite number of operations?

Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer N.
The second line contains N space-separated integers A1,A2,…,AN.
Output
For each test case, print a single line containing the string "Yes" if it is possible to make the sequence strictly increasing or "No" otherwise (without quotes).

You may print each character of each string in uppercase or lowercase (for example, the strings "yEs", "yes", "Yes" and "YES" will all be treated as identical).

Codes Are:-
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int t;
    cin>>t;
    while(t--)
    {   int n;
        cin>>n;
        vector<int>v(n);
        for(auto i=0;i<n;i++)
        {   cin>>v[i];
        
        }
        
        bool check=true;
        for(auto i=0;i<n-1;i++)
        {
            if(v[i]<v[i+1])
            check=false;
        }
        
        if(check)
        cout<<"NO"<<endl;
        else
        cout<<"YES"<<endl;
    }
}
